{"mappings":"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","sources":["packages/@react-spectrum/actiongroup/src/index.ts","packages/@react-spectrum/actiongroup/src/ActionGroup.tsx","packages/@adobe/spectrum-css-temp/components/button/vars.css","packages/@adobe/spectrum-css-temp/components/actiongroup/vars.css"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n/// <reference types=\"css-module-types\" />\nexport {ActionGroup} from './ActionGroup';\nexport {Item} from '@react-stately/collections';\nexport type {SpectrumActionGroupProps} from '@react-types/actiongroup';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ActionButton} from '@react-spectrum/button';\nimport {AriaLabelingProps, DOMProps, DOMRef, Node, StyleProps} from '@react-types/shared';\nimport buttonStyles from '@adobe/spectrum-css-temp/components/button/vars.css';\nimport ChevronDownMedium from '@spectrum-icons/ui/ChevronDownMedium';\nimport {\n  classNames,\n  ClearSlots,\n  SlotProvider,\n  useDOMRef,\n  useSlotProps,\n  useStyleProps\n} from '@react-spectrum/utils';\nimport {filterDOMProps, mergeProps, useId, useLayoutEffect, useResizeObserver, useValueEffect} from '@react-aria/utils';\nimport {FocusScope} from '@react-aria/focus';\nimport {Item, Menu, MenuTrigger} from '@react-spectrum/menu';\nimport {ListState, useListState} from '@react-stately/list';\nimport More from '@spectrum-icons/workflow/More';\nimport {PressResponder, useHover} from '@react-aria/interactions';\nimport {Provider} from '@react-spectrum/provider';\nimport React, {forwardRef, Key, ReactElement, ReactNode, useCallback, useMemo, useRef, useState} from 'react';\nimport {SpectrumActionGroupProps} from '@react-types/actiongroup';\nimport styles from '@adobe/spectrum-css-temp/components/actiongroup/vars.css';\nimport {Text} from '@react-spectrum/text';\nimport {Tooltip, TooltipTrigger} from '@react-spectrum/tooltip';\nimport {useActionGroup} from '@react-aria/actiongroup';\nimport {useActionGroupItem} from '@react-aria/actiongroup';\nimport {useProviderProps} from '@react-spectrum/provider';\n\nfunction ActionGroup<T extends object>(props: SpectrumActionGroupProps<T>, ref: DOMRef<HTMLDivElement>) {\n  props = useProviderProps(props);\n  props = useSlotProps(props, 'actionGroup');\n\n  let {\n    isEmphasized,\n    density,\n    isJustified,\n    isDisabled,\n    orientation = 'horizontal',\n    isQuiet,\n    staticColor,\n    overflowMode = 'wrap',\n    onAction,\n    buttonLabelBehavior,\n    summaryIcon,\n    ...otherProps\n  } = props;\n\n  let domRef = useDOMRef(ref);\n  let wrapperRef = useRef<HTMLDivElement>(null);\n  let state = useListState({...props, suppressTextValueWarning: true});\n  let {actionGroupProps} = useActionGroup(props, state, domRef);\n  let isVertical = orientation === 'vertical';\n  let providerProps = {isEmphasized, isDisabled, isQuiet};\n  let {styleProps} = useStyleProps(props);\n\n  // Only hide button text if every item contains more than just plain text (we assume an icon).\n  let isIconCollapsible = useMemo(() => [...state.collection].every(item => typeof item.rendered !== 'string'), [state.collection]);\n  let [{visibleItems, hideButtonText, isMeasuring}, setVisibleItems] = useValueEffect({\n    visibleItems: state.collection.size,\n    hideButtonText: buttonLabelBehavior === 'hide' && isIconCollapsible,\n    isMeasuring: false\n  });\n\n  let selectionMode = state.selectionManager.selectionMode;\n  let updateOverflow = useCallback(() => {\n    if (overflowMode === 'wrap') {\n      return;\n    }\n\n    if (orientation === 'vertical' && selectionMode !== 'none') {\n      // Collapsing vertical action groups with selection is currently unsupported by Spectrum.\n      return;\n    }\n\n    let computeVisibleItems = (visibleItems: number) => {\n      if (domRef.current && wrapperRef.current) {\n        let listItems = Array.from(domRef.current.children) as HTMLLIElement[];\n        let containerSize = orientation === 'horizontal' ? wrapperRef.current.offsetWidth : wrapperRef.current.offsetHeight;\n        let isShowingMenu = visibleItems < state.collection.size;\n        let calculatedSize = 0;\n        let newVisibleItems = 0;\n\n        if (isShowingMenu) {\n          let item = listItems.pop();\n          if (item) {\n            calculatedSize += orientation === 'horizontal'\n              ? outerWidth(item, false, true)\n              : outerHeight(item, false, true);\n          }\n        }\n\n        for (let [i, item] of listItems.entries()) {\n          calculatedSize += orientation === 'horizontal'\n            ? outerWidth(item, i === 0, i === listItems.length - 1)\n            : outerHeight(item, i === 0, i === listItems.length - 1);\n          if (calculatedSize <= containerSize) {\n            newVisibleItems++;\n          } else {\n            break;\n          }\n        }\n\n        // If selection is enabled, and not all of the items fit, collapse all of them into a dropdown\n        // immediately rather than having some visible and some not.\n        if (selectionMode !== 'none' && newVisibleItems < state.collection.size) {\n          return 0;\n        }\n\n        return newVisibleItems;\n      }\n      return visibleItems;\n    };\n\n    setVisibleItems(function *() {\n      let hideButtonText = buttonLabelBehavior === 'hide' && isIconCollapsible;\n\n      // Update to show all items.\n      yield {\n        visibleItems: state.collection.size,\n        hideButtonText,\n        isMeasuring: true\n      };\n\n      // Measure, and update to show the items that fit.\n      let newVisibleItems = computeVisibleItems(state.collection.size);\n      let isMeasuring = newVisibleItems < state.collection.size && newVisibleItems > 0;\n\n      // If not all of the buttons fit, and buttonLabelBehavior is 'collapse', then first try hiding\n      // the button text and only showing icons. Only if that still doesn't fit collapse into a menu.\n      if (newVisibleItems < state.collection.size && buttonLabelBehavior === 'collapse' && isIconCollapsible) {\n        yield {\n          visibleItems: state.collection.size,\n          hideButtonText: true,\n          isMeasuring: true\n        };\n\n        newVisibleItems = computeVisibleItems(state.collection.size);\n        isMeasuring = newVisibleItems < state.collection.size && newVisibleItems > 0;\n        hideButtonText = true;\n      }\n\n      yield {\n        visibleItems: newVisibleItems,\n        hideButtonText,\n        isMeasuring\n      };\n\n      // If the number of items is less than the number of children,\n      // then update again to ensure that the menu fits.\n      if (isMeasuring) {\n        yield {\n          visibleItems: computeVisibleItems(newVisibleItems),\n          hideButtonText,\n          isMeasuring: false\n        };\n      }\n    });\n  }, [domRef, state.collection, setVisibleItems, overflowMode, selectionMode, buttonLabelBehavior, isIconCollapsible, orientation]);\n\n  // Watch the parent element for size changes. Watching only the action group itself may not work\n  // in all scenarios because it may not shrink when available space is reduced.\n  let parentRef = useMemo(() => ({\n    get current() {\n      return wrapperRef.current?.parentElement;\n    }\n  }), [wrapperRef]);\n  useResizeObserver({ref: overflowMode !== 'wrap' ? parentRef : undefined, onResize: updateOverflow});\n  useLayoutEffect(updateOverflow, [updateOverflow, state.collection]);\n\n  let children = [...state.collection];\n  let menuItem: ReactElement | null = null;\n  let menuProps = {};\n\n  // If there are no visible items, don't apply any props to the action group container\n  // and pass all aria labeling props through to the menu button.\n  if (overflowMode === 'collapse' && visibleItems === 0) {\n    menuProps = filterDOMProps(props, {labelable: true});\n    actionGroupProps = {};\n  }\n\n  if (overflowMode === 'collapse' && visibleItems < state.collection.size) {\n    let menuChildren = children.slice(visibleItems);\n    children = children.slice(0, visibleItems);\n    menuItem = (\n      <ActionGroupMenu\n        {...menuProps}\n        items={menuChildren}\n        onAction={onAction}\n        isDisabled={isDisabled}\n        isEmphasized={isEmphasized}\n        staticColor={staticColor}\n        state={state}\n        summaryIcon={summaryIcon}\n        hideButtonText={hideButtonText}\n        isOnlyItem={visibleItems === 0}\n        orientation={orientation} />\n    );\n  }\n\n  let style = {\n    ...styleProps.style,\n    // While measuring, take up as much space as possible.\n    flexBasis: isMeasuring ? '100%' : undefined\n  };\n\n  return (\n    <FocusScope>\n      <div {...styleProps} style={style} className={classNames(styles, 'flex-container', styleProps.className)} ref={wrapperRef}>\n        <div\n          {...actionGroupProps}\n          ref={domRef}\n          className={\n            classNames(\n              styles,\n              'flex-gap',\n              'spectrum-ActionGroup',\n              {\n                'spectrum-ActionGroup--quiet': isQuiet,\n                'spectrum-ActionGroup--vertical': isVertical,\n                'spectrum-ActionGroup--compact': density === 'compact',\n                'spectrum-ActionGroup--justified': isJustified && !isMeasuring,\n                'spectrum-ActionGroup--overflowCollapse': overflowMode === 'collapse'\n              },\n              otherProps.UNSAFE_className\n            )\n          }>\n          <Provider {...providerProps}>\n            {children.map((item) => (\n              <ActionGroupItem\n                key={item.key}\n                onAction={onAction}\n                isDisabled={isDisabled}\n                isEmphasized={isEmphasized}\n                staticColor={staticColor}\n                item={item}\n                state={state}\n                hideButtonText={hideButtonText}\n                orientation={orientation} />\n            ))}\n            {menuItem}\n          </Provider>\n        </div>\n      </div>\n    </FocusScope>\n  );\n}\n\n/**\n * An ActionGroup is a grouping of ActionButtons that are related to one another.\n */\nconst _ActionGroup = forwardRef(ActionGroup) as <T>(props: SpectrumActionGroupProps<T> & {ref?: DOMRef<HTMLDivElement>}) => ReactElement;\nexport {_ActionGroup as ActionGroup};\n\ninterface ActionGroupItemProps<T> extends DOMProps, StyleProps {\n  item: Node<T>,\n  state: ListState<T>,\n  isDisabled?: boolean,\n  isEmphasized?: boolean,\n  staticColor?: 'white' | 'black',\n  hideButtonText?: boolean,\n  orientation?: 'horizontal' | 'vertical',\n  onAction?: (key: Key) => void\n}\n\nfunction ActionGroupItem<T>({item, state, isDisabled, isEmphasized, staticColor, onAction, hideButtonText, orientation}: ActionGroupItemProps<T>) {\n  let ref = useRef(null);\n  let {buttonProps} = useActionGroupItem({key: item.key}, state);\n  isDisabled = isDisabled || state.disabledKeys.has(item.key);\n  let isSelected = state.selectionManager.isSelected(item.key);\n  let {hoverProps, isHovered} = useHover({isDisabled});\n  let domProps = filterDOMProps(item.props);\n\n  if (onAction && !isDisabled) {\n    buttonProps = mergeProps(buttonProps, {\n      onPress: () => onAction(item.key)\n    });\n  }\n\n  // If button text is hidden, we need to show it as a tooltip instead, so\n  // go find the text element in the DOM after rendering.\n  let textId = useId();\n  let [textContent, setTextContent] = useState<string | null | undefined>('');\n  useLayoutEffect(() => {\n    if (hideButtonText) {\n      setTextContent(document.getElementById(textId)?.textContent);\n    }\n  }, [hideButtonText, item.rendered, textId]);\n\n  let button = (\n    // Use a PressResponder to send DOM props through.\n    // ActionButton doesn't allow overriding the role by default.\n    <PressResponder {...mergeProps(buttonProps, hoverProps, domProps)}>\n      <ClearSlots>\n        <SlotProvider\n          slots={{\n            text: {\n              id: hideButtonText ? textId : null,\n              isHidden: hideButtonText\n            }\n          }}>\n          <ActionButton\n            ref={ref}\n            UNSAFE_className={\n              classNames(\n                styles,\n                'spectrum-ActionGroup-item',\n                {\n                  'is-selected': isSelected,\n                  'is-hovered': isHovered,\n                  'spectrum-ActionGroup-item--iconOnly': hideButtonText,\n                  'spectrum-ActionGroup-item--isDisabled': isDisabled\n                },\n                classNames(\n                  buttonStyles,\n                  {\n                    'spectrum-ActionButton--emphasized': isEmphasized,\n                    'is-selected': isSelected\n                  }\n                )\n              )\n            }\n            isDisabled={isDisabled}\n            staticColor={staticColor}\n            aria-label={item['aria-label']}\n            aria-labelledby={item['aria-label'] == null && hideButtonText ? textId : undefined}>\n            {item.rendered}\n          </ActionButton>\n        </SlotProvider>\n      </ClearSlots>\n    </PressResponder>\n  );\n\n  if (hideButtonText && textContent) {\n    button = (\n      <TooltipTrigger placement={orientation === 'vertical' ? 'end' : 'top'}>\n        {button}\n        <Tooltip>{textContent}</Tooltip>\n      </TooltipTrigger>\n    );\n  }\n\n  if (item.wrapper) {\n    button = item.wrapper(button);\n  }\n\n  return button;\n}\n\ninterface ActionGroupMenuProps<T> extends AriaLabelingProps {\n  state: ListState<T>,\n  isDisabled?: boolean,\n  isEmphasized?: boolean,\n  staticColor?: 'white' | 'black',\n  items: Node<T>[],\n  hideButtonText?: boolean,\n  summaryIcon?: ReactNode,\n  isOnlyItem?: boolean,\n  orientation?: 'horizontal' | 'vertical',\n  onAction?: (key: Key) => void\n}\n\nfunction ActionGroupMenu<T>({state, isDisabled, isEmphasized, staticColor, items, onAction, summaryIcon, hideButtonText, isOnlyItem, orientation, ...otherProps}: ActionGroupMenuProps<T>) {\n  // Use the key of the first item within the menu as the key of the button.\n  // The key must actually exist in the collection for focus to work correctly.\n  let key = items[0].key;\n  let {buttonProps} = useActionGroupItem({key}, state);\n\n  // The menu button shouldn't act like an actual action group item.\n  delete buttonProps.onPress;\n  delete buttonProps.role;\n  delete buttonProps['aria-checked'];\n\n  let {hoverProps, isHovered} = useHover({isDisabled});\n\n  // If no aria-label or aria-labelledby is given, provide a default one.\n  let ariaLabel = otherProps['aria-label'] || (otherProps['aria-labelledby'] ? undefined : '…');\n  let ariaLabelledby = otherProps['aria-labelledby'];\n  let textId = useId();\n  let id = useId();\n\n  // Summary icon only applies when selection is enabled.\n  if (state.selectionManager.selectionMode === 'none') {\n    summaryIcon = null;\n  }\n\n  let iconOnly = false;\n\n  // If there is a selection, show the selected state on the menu button.\n  let isSelected = state.selectionManager.selectionMode !== 'none' && !state.selectionManager.isEmpty;\n\n  // If single selection and empty selection is not allowed, swap the contents of the button to the selected item (like a Picker).\n  if (!summaryIcon && state.selectionManager.selectionMode === 'single' && state.selectionManager.disallowEmptySelection && state.selectionManager.firstSelectedKey != null) {\n    let selectedItem = state.collection.getItem(state.selectionManager.firstSelectedKey);\n    if (selectedItem) {\n      summaryIcon = selectedItem.rendered;\n      if (typeof summaryIcon === 'string') {\n        summaryIcon = <Text>{summaryIcon}</Text>;\n      }\n      iconOnly = !!hideButtonText;\n      ariaLabelledby = `${ariaLabelledby ?? id} ${textId}`;\n    }\n  }\n\n  if (summaryIcon) {\n    // If there's a custom summary icon, also add a chevron.\n    summaryIcon = (\n      <>\n        <ChevronDownMedium UNSAFE_className={classNames(styles, 'spectrum-ActionGroup-menu-chevron')} />\n        <span className={classNames(styles, 'spectrum-ActionGroup-menu-contents', {'spectrum-ActionGroup-item--iconOnly': iconOnly})}>\n          {summaryIcon}\n        </span>\n      </>\n    );\n  }\n\n  return (\n    // Use a PressResponder to send DOM props through.\n    <MenuTrigger align={isOnlyItem ? 'start' : 'end'} direction={orientation === 'vertical' ? 'end' : 'bottom'}>\n      <SlotProvider\n        slots={{\n          text: {\n            id: hideButtonText ? textId : null,\n            isHidden: hideButtonText,\n            UNSAFE_className: classNames(styles, 'spectrum-ActionGroup-menu-text')\n          }\n        }}>\n        <PressResponder {...mergeProps(buttonProps, hoverProps)}>\n          <ActionButton\n            {...otherProps}\n            id={id}\n            aria-label={ariaLabel}\n            aria-labelledby={ariaLabelledby}\n            UNSAFE_className={\n              classNames(\n                styles,\n                'spectrum-ActionGroup-item',\n                'spectrum-ActionGroup-menu',\n                {\n                  'is-hovered': isHovered,\n                  'is-selected': isSelected\n                },\n                classNames(\n                  buttonStyles,\n                  {\n                    'is-selected': isSelected,\n                    'spectrum-ActionButton--emphasized': isEmphasized\n                  }\n                )\n              )\n            }\n            isDisabled={isDisabled}\n            staticColor={staticColor}>\n            {summaryIcon || <More />}\n          </ActionButton>\n        </PressResponder>\n      </SlotProvider>\n      <Menu\n        items={items}\n        disabledKeys={state.disabledKeys}\n        selectionMode={state.selectionManager.selectionMode}\n        selectedKeys={state.selectionManager.selectedKeys}\n        disallowEmptySelection={state.selectionManager.disallowEmptySelection}\n        onSelectionChange={(keys) => state.selectionManager.setSelectedKeys(keys)}\n        onAction={onAction}>\n        {node => <Item textValue={node.textValue}>{node.rendered}</Item>}\n      </Menu>\n    </MenuTrigger>\n  );\n}\n\nfunction outerWidth(element: HTMLElement, ignoreLeftMargin: boolean, ignoreRightMargin: boolean) {\n  let style = window.getComputedStyle(element);\n  return element.offsetWidth + (ignoreLeftMargin ? 0 : toNumber(style.marginLeft)) + (ignoreRightMargin ? 0 : toNumber(style.marginRight));\n}\n\n\nfunction outerHeight(element: HTMLElement, ignoreTopMargin: boolean, ignoreBottomMargin: boolean) {\n  let style = window.getComputedStyle(element);\n  return element.offsetHeight + (ignoreTopMargin ? 0 : toNumber(style.marginTop)) + (ignoreBottomMargin ? 0 : toNumber(style.marginBottom));\n}\n\nfunction toNumber(value: string) {\n  let parsed = parseInt(value, 10);\n  return isNaN(parsed) ? 0 : parsed;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n@import './index.css';\n@import './skin.css';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n@import './index.css';\n"],"names":[],"version":3,"file":"module.js.map"}
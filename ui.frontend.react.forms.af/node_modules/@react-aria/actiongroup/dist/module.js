import {createFocusManager as $1oG4F$createFocusManager} from "@react-aria/focus";
import {filterDOMProps as $1oG4F$filterDOMProps, mergeProps as $1oG4F$mergeProps} from "@react-aria/utils";
import {useLocale as $1oG4F$useLocale} from "@react-aria/i18n";
import {useRef as $1oG4F$useRef, useEffect as $1oG4F$useEffect} from "react";

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 


const $304ac34015d4535d$var$BUTTON_GROUP_ROLES = {
    "none": "toolbar",
    "single": "radiogroup",
    "multiple": "toolbar"
};
function $304ac34015d4535d$export$f4bf8d43c16de704(props, state, ref) {
    let { isDisabled: isDisabled , orientation: orientation = "horizontal"  } = props;
    let allKeys = [
        ...state.collection.getKeys()
    ];
    if (!allKeys.some((key)=>!state.disabledKeys.has(key))) isDisabled = true;
    let { direction: direction  } = (0, $1oG4F$useLocale)();
    let focusManager = (0, $1oG4F$createFocusManager)(ref);
    let flipDirection = direction === "rtl" && orientation === "horizontal";
    let onKeyDown = (e)=>{
        if (!e.currentTarget.contains(e.target)) return;
        switch(e.key){
            case "ArrowRight":
            case "ArrowDown":
                e.preventDefault();
                e.stopPropagation();
                if (e.key === "ArrowRight" && flipDirection) focusManager.focusPrevious({
                    wrap: true
                });
                else focusManager.focusNext({
                    wrap: true
                });
                break;
            case "ArrowLeft":
            case "ArrowUp":
                e.preventDefault();
                e.stopPropagation();
                if (e.key === "ArrowLeft" && flipDirection) focusManager.focusNext({
                    wrap: true
                });
                else focusManager.focusPrevious({
                    wrap: true
                });
                break;
        }
    };
    let role = $304ac34015d4535d$var$BUTTON_GROUP_ROLES[state.selectionManager.selectionMode];
    return {
        actionGroupProps: {
            ...(0, $1oG4F$filterDOMProps)(props, {
                labelable: true
            }),
            role: role,
            "aria-orientation": role === "toolbar" ? orientation : null,
            "aria-disabled": isDisabled,
            onKeyDown: onKeyDown
        }
    };
}


/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

const $f0ac0fb73c3ec062$var$BUTTON_ROLES = {
    "none": null,
    "single": "radio",
    "multiple": "checkbox"
};
function $f0ac0fb73c3ec062$export$9597202bd3099a29(props, state, ref) {
    let selectionMode = state.selectionManager.selectionMode;
    let buttonProps = {
        role: $f0ac0fb73c3ec062$var$BUTTON_ROLES[selectionMode]
    };
    if (selectionMode !== "none") {
        let isSelected = state.selectionManager.isSelected(props.key);
        buttonProps["aria-checked"] = isSelected;
    }
    let isFocused = props.key === state.selectionManager.focusedKey;
    let lastRender = (0, $1oG4F$useRef)({
        isFocused: isFocused,
        state: state
    });
    lastRender.current = {
        isFocused: isFocused,
        state: state
    };
    // If the focused item is removed from the DOM, reset the focused key to null.
    // eslint-disable-next-line arrow-body-style
    (0, $1oG4F$useEffect)(()=>{
        return ()=>{
            if (lastRender.current.isFocused) lastRender.current.state.selectionManager.setFocusedKey(null);
        };
    }, []);
    return {
        buttonProps: (0, $1oG4F$mergeProps)(buttonProps, {
            tabIndex: isFocused || state.selectionManager.focusedKey == null ? 0 : -1,
            onFocus () {
                state.selectionManager.setFocusedKey(props.key);
            },
            onPress () {
                state.selectionManager.select(props.key);
            }
        })
    };
}




export {$304ac34015d4535d$export$f4bf8d43c16de704 as useActionGroup, $f0ac0fb73c3ec062$export$9597202bd3099a29 as useActionGroupItem};
//# sourceMappingURL=module.js.map

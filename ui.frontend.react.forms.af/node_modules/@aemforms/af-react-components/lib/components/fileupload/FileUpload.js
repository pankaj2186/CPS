"use strict";
/*************************************************************************
* ADOBE CONFIDENTIAL
* ___________________
*
* Copyright 2022 Adobe
* All Rights Reserved.
*
* NOTICE: All information contained herein is, and remains
* the property of Adobe and its suppliers, if any. The intellectual
* and technical concepts contained herein are proprietary to Adobe
* and its suppliers and are protected by all applicable intellectual
* property laws, including trade secret and copyright laws.
* Dissemination of this information or reproduction of this material
* is strictly forbidden unless prior written permission is obtained
* from Adobe.

* Adobe permits you to use and modify this file solely in accordance with
* the terms of the Adobe license agreement accompanying it.
*************************************************************************/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const FileUpload_styles_1 = require("./FileUpload.styles");
const KILO_BYTES_PER_BYTE = 1000;
const DEFAULT_MAX_FILE_SIZE_IN_BYTES = 500000000;
const convertBytesToKB = (bytes) => Math.ceil(bytes / KILO_BYTES_PER_BYTE);
/**
 *
 * @param label
 * @param updateFilesCb (File[] => {} | File => {})
 * @param maxFileSizeInBytes
 * @param description
 * @param otherProps
 * @constructor
 */
const FileUpload = ({ 
// @ts-ignore
label, 
// @ts-ignore
updateFilesCb, maxFileSizeInBytes = DEFAULT_MAX_FILE_SIZE_IN_BYTES, 
// @ts-ignore
description, 
// @ts-ignore
value, 
// @ts-ignore
multiple, ...otherProps }) => {
    const fileInputField = (0, react_1.useRef)(null);
    const invalid = otherProps.validationState === 'invalid';
    const helpText = invalid ? otherProps.errorMessage || '' : description || '';
    const handleUploadBtnClick = () => {
        // @ts-ignore
        fileInputField.current.click();
    };
    const fileListToArray = (newFiles) => {
        let localFiles = [];
        //@ts-ignore
        for (const file of newFiles) {
            if (file.size <= maxFileSizeInBytes) {
                localFiles.push(file);
            }
        }
        return localFiles;
    };
    const callUpdateFilesCb = (files) => {
        if (multiple) {
            updateFilesCb(files);
        }
        else {
            updateFilesCb(files.length > 0 ? files[0] : null);
        }
    };
    function isSame(files, value) {
        return (
        //both null
        (value == null && (files === null || files.length === 0)) ||
            (value != null && files != null &&
                value.length === files.length && value.every((x, i) => {
                return x.equals(files[i]);
            })));
    }
    const [files, setFiles] = (0, react_1.useState)(value || []);
    // add the default values to the initial files checking the size
    //let updatedFiles: any = addNewFiles(value);
    if (!isSame(files, value)) {
        setFiles(value);
    }
    const handleNewFileUpload = (e) => {
        const { files: newFiles } = e.target;
        if (newFiles.length) {
            const updatedFiles = files.concat(fileListToArray(newFiles));
            setFiles(updatedFiles);
            callUpdateFilesCb(updatedFiles);
        }
    };
    const removeFile = (index) => {
        const updatedFiles = files.slice(0, index).concat(files.slice(index + 1));
        setFiles(updatedFiles);
        callUpdateFilesCb(updatedFiles);
    };
    const id = otherProps.id;
    const labelProps = { id: `${id}_2`, for: id };
    const fieldProps = { id, 'aria-labelledby': `${id}_2`, 'aria-describedby': `${id}_3`, 'aria-invalid': invalid };
    const helpTextProps = { id: `${id}_3` };
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(FileUpload_styles_1.FileUploadContainer, { isError: invalid },
            react_1.default.createElement(FileUpload_styles_1.InputLabel, { ...labelProps }, label),
            react_1.default.createElement(FileUpload_styles_1.DragDropText, null, "Drag and drop your files anywhere or"),
            react_1.default.createElement(FileUpload_styles_1.UploadFileBtn, { type: 'button', onClick: handleUploadBtnClick },
                react_1.default.createElement("i", { className: "fas fa-file-upload" }),
                react_1.default.createElement("span", null,
                    " Upload ",
                    multiple ? 'files' : 'a file')),
            react_1.default.createElement(FileUpload_styles_1.FormField, { type: "file", ref: fileInputField, onChange: handleNewFileUpload, defaultValue: "", disabled: otherProps.isReadOnly || otherProps.isDisabled, required: otherProps.isRequired, title: "", multiple: multiple, ...otherProps, ...fieldProps })),
        helpText ? react_1.default.createElement(FileUpload_styles_1.InputDescription, { isError: invalid, ...helpTextProps }, helpText) : null,
        react_1.default.createElement(FileUpload_styles_1.FilePreviewContainer, null,
            react_1.default.createElement(FileUpload_styles_1.PreviewList, null, files && files.map((file, index) => {
                const fileName = file.name;
                // @ts-ignore
                let isImageFile = file.type?.split('/')[0] === 'image';
                return (react_1.default.createElement(FileUpload_styles_1.PreviewContainer, { key: fileName },
                    react_1.default.createElement("div", null,
                        isImageFile && file.data instanceof File && (react_1.default.createElement(FileUpload_styles_1.ImagePreview, { src: URL?.createObjectURL(file.data), alt: `file preview ${index}` })),
                        react_1.default.createElement(FileUpload_styles_1.FileMetaData, { className: "file-metadata", isImageFile: isImageFile },
                            react_1.default.createElement("span", null, file.name),
                            react_1.default.createElement("aside", null,
                                react_1.default.createElement("span", null,
                                    convertBytesToKB(file.size),
                                    " kb"),
                                react_1.default.createElement(FileUpload_styles_1.RemoveFileIcon, { className: "fas fa-trash-alt", onClick: () => removeFile(index) }))))));
            })))));
};
exports.default = FileUpload;

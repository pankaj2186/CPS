"use strict";
/*************************************************************************
* ADOBE CONFIDENTIAL
* ___________________
*
* Copyright 2022 Adobe
* All Rights Reserved.
*
* NOTICE: All information contained herein is, and remains
* the property of Adobe and its suppliers, if any. The intellectual
* and technical concepts contained herein are proprietary to Adobe
* and its suppliers and are protected by all applicable intellectual
* property laws, including trade secret and copyright laws.
* Dissemination of this information or reproduction of this material
* is strictly forbidden unless prior written permission is obtained
* from Adobe.

* Adobe permits you to use and modify this file solely in accordance with
* the terms of the Adobe license agreement accompanying it.
*************************************************************************/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const FileUpload_1 = __importDefault(require("./fileupload/FileUpload"));
const af_react_renderer_1 = require("@aemforms/af-react-renderer");
const react_1 = __importDefault(require("react"));
const SpectrumMappers_1 = require("../utils/SpectrumMappers");
const af_core_1 = require("@aemforms/af-core");
const mapper = (0, SpectrumMappers_1.combineConvertors)(SpectrumMappers_1.baseConvertor, SpectrumMappers_1.constraintConvertor, (a, b) => {
    let val = a.value && ((a.value instanceof Array) ? a.value : [a.value]);
    const errorMessage = (0, SpectrumMappers_1.formatedErrorMessage)(a);
    return {
        isReadOnly: a.readOnly === true,
        isRequired: a.required === true,
        updateFiles: b.dispatchChange,
        maxFileSizeInBytes: (0, af_core_1.getFileSizeInBytes)(a.maxFileSize),
        value: val,
        ...(a.type?.endsWith('[]') ? {
            multiple: true
        } : {}),
        accept: a.accept,
        errorMessage,
        // @ts-ignore
        id: a.id
    };
});
const FileUploadWrapper = (props) => {
    const handleChange = (files) => {
        // todo: this can be array of mixed types (ie) Array<File | FileObject>
        props.updateFiles(files);
    };
    return react_1.default.createElement(FileUpload_1.default, { ...props, updateFilesCb: handleChange });
};
const FileUploadComponent = function (originalProps) {
    return (0, af_react_renderer_1.useRenderer)(originalProps, FileUploadWrapper, mapper, true);
};
exports.default = FileUploadComponent;

"use strict";
/*************************************************************************
* ADOBE CONFIDENTIAL
* ___________________
*
* Copyright 2022 Adobe
* All Rights Reserved.
*
* NOTICE: All information contained herein is, and remains
* the property of Adobe and its suppliers, if any. The intellectual
* and technical concepts contained herein are proprietary to Adobe
* and its suppliers and are protected by all applicable intellectual
* property laws, including trade secret and copyright laws.
* Dissemination of this information or reproduction of this material
* is strictly forbidden unless prior written permission is obtained
* from Adobe.

* Adobe permits you to use and modify this file solely in accordance with
* the terms of the Adobe license agreement accompanying it.
*************************************************************************/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_spectrum_1 = require("@adobe/react-spectrum");
const af_react_renderer_1 = require("@aemforms/af-react-renderer");
const react_1 = __importDefault(require("react"));
const SpectrumMappers_1 = require("../utils/SpectrumMappers");
const mapper = (0, SpectrumMappers_1.combineConvertors)(SpectrumMappers_1.baseConvertor, SpectrumMappers_1.fieldConvertor, SpectrumMappers_1.constraintConvertor, (a) => {
    const value = a.value;
    const selectedValue = a.enum?.[0];
    const unselectedValue = (a.enum?.length || 0) < 2 ? null : a.enum?.[1];
    return {
        selectedValue,
        unselectedValue,
        isSelected: value !== undefined && value === selectedValue
    };
});
const SpectrumCheckboxWrapper = (props) => {
    const handleChange = (isSelected) => {
        const value = isSelected ? props.selectedValue : props.unselectedValue;
        props.onChange(value);
    };
    return react_1.default.createElement(react_spectrum_1.Checkbox, { ...props, onChange: handleChange }, props.label);
};
const Comp = (0, SpectrumMappers_1.withErrorMessage)(SpectrumCheckboxWrapper);
/**
 * The checkbox component follows the convention that the first value of option is used as selected value
 * while the second option is used as deselected value. Any other option value is ignored.
 * @param originalProps
 * @constructor
 */
const CheckboxComponent = function (originalProps) {
    return (0, af_react_renderer_1.useRenderer)(originalProps, Comp, mapper);
};
exports.default = CheckboxComponent;

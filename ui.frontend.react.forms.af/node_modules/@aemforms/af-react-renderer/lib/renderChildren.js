"use strict";
/*************************************************************************
* ADOBE CONFIDENTIAL
* ___________________
*
* Copyright 2022 Adobe
* All Rights Reserved.
*
* NOTICE: All information contained herein is, and remains
* the property of Adobe and its suppliers, if any. The intellectual
* and technical concepts contained herein are proprietary to Adobe
* and its suppliers and are protected by all applicable intellectual
* property laws, including trade secret and copyright laws.
* Dissemination of this information or reproduction of this material
* is strictly forbidden unless prior written permission is obtained
* from Adobe.

* Adobe permits you to use and modify this file solely in accordance with
* the terms of the Adobe license agreement accompanying it.
*************************************************************************/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderChildren = exports.getRenderer = exports.EmptyRenderer = void 0;
const react_1 = __importDefault(require("react"));
const EmptyRenderer = (node) => {
    console.error('undefined fieldtype', node);
    return null;
};
exports.EmptyRenderer = EmptyRenderer;
const getRenderer = (node, mappings) => {
    let Comp;
    if (':type' in node) {
        Comp = mappings === null || mappings === void 0 ? void 0 : mappings[node[':type']];
    }
    if (Comp == undefined && 'fieldType' in node) {
        Comp = mappings === null || mappings === void 0 ? void 0 : mappings[node.fieldType];
    }
    if (Comp === undefined) {
        Comp = exports.EmptyRenderer;
    }
    return Comp;
};
exports.getRenderer = getRenderer;
const renderChildren = function (props, mappings, modelId, handlers) {
    const items = props.items;
    const maxItems = props.maxItems;
    const minItems = props.minItems;
    if (typeof items === 'object') {
        const children = props.items;
        return (children.map((child) => {
            const Comp = (0, exports.getRenderer)(child, mappings);
            //@ts-ignore
            const addRequired = maxItems == -1 || items.length < maxItems;
            //@ts-ignore
            const removeRequired = items.length > minItems;
            const addRemoveRequired = addRequired || removeRequired;
            const Repeater = mappings.repeater;
            {
                return (addRemoveRequired && Repeater !== undefined ?
                    (react_1.default.createElement(react_1.default.Fragment, null,
                        react_1.default.createElement(Repeater, { add: addRequired, remove: removeRequired, index: child.index, handlers: handlers }),
                        react_1.default.createElement(Comp, Object.assign({ key: child.id + '__' + modelId }, child)))) :
                    react_1.default.createElement(Comp, Object.assign({ key: child.id + '__' + modelId }, child)));
            }
        }));
    }
    else {
        return [];
    }
};
exports.renderChildren = renderChildren;

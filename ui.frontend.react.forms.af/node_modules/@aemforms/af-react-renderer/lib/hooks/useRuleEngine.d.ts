/*************************************************************************
* ADOBE CONFIDENTIAL
* ___________________
*
* Copyright 2022 Adobe
* All Rights Reserved.
*
* NOTICE: All information contained herein is, and remains
* the property of Adobe and its suppliers, if any. The intellectual
* and technical concepts contained herein are proprietary to Adobe
* and its suppliers and are protected by all applicable intellectual
* property laws, including trade secret and copyright laws.
* Dissemination of this information or reproduction of this material
* is strictly forbidden unless prior written permission is obtained
* from Adobe.

* Adobe permits you to use and modify this file solely in accordance with
* the terms of the Adobe license agreement accompanying it.
*************************************************************************/
import { State } from '@aemforms/af-core';
export declare type Dispatch<T> = (x?: T) => any;
export declare type Handlers = {
    dispatchBlur: Dispatch<any>;
    dispatchChange: Dispatch<any>;
    dispatchClick: Dispatch<void>;
    dispatchAddItem: Dispatch<number>;
    dispatchRemoveItem: Dispatch<number>;
    dispatchFocus: Dispatch<void>;
    formatMessage?: any;
};
export declare type WithViewState<P> = State<P> & {
    isInFocus?: boolean;
};
/**
 * Binds the component's state to the Form and dynamically changing it depending upon
 * the rules written for that Field in the Form
 * @param props
 * @param supportFormats
 */
export declare const useRuleEngine: <P>(props: State<P>, supportFormats?: boolean) => [WithViewState<P>, Handlers];
export declare const useFocus: <P>(props: State<P>) => ((node: any) => void)[];
/**
 * React hook to get the previous state
 * @param value
 */
export declare const usePrevious: (value: any) => undefined;

"use strict";
/*************************************************************************
* ADOBE CONFIDENTIAL
* ___________________
*
* Copyright 2022 Adobe
* All Rights Reserved.
*
* NOTICE: All information contained herein is, and remains
* the property of Adobe and its suppliers, if any. The intellectual
* and technical concepts contained herein are proprietary to Adobe
* and its suppliers and are protected by all applicable intellectual
* property laws, including trade secret and copyright laws.
* Dissemination of this information or reproduction of this material
* is strictly forbidden unless prior written permission is obtained
* from Adobe.

* Adobe permits you to use and modify this file solely in accordance with
* the terms of the Adobe license agreement accompanying it.
*************************************************************************/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useRenderer = exports.useFormIntl = exports.translateMessage = void 0;
const af_core_1 = require("@aemforms/af-core");
const react_1 = __importDefault(require("react"));
const react_intl_1 = require("react-intl");
const useRuleEngine_1 = require("./useRuleEngine");
const translateMessage = (obj, formatMessage) => (propName) => {
    var _a, _b, _c, _d;
    // todo: need to handle enumNames in a special manner here
    let value = (0, af_core_1.getOrElse)(obj, propName);
    if ((_b = (_a = obj === null || obj === void 0 ? void 0 : obj[af_core_1.CUSTOM_PROPS_KEY]) === null || _a === void 0 ? void 0 : _a[af_core_1.TRANSLATION_ID]) === null || _b === void 0 ? void 0 : _b[propName]) {
        let identifier = (_d = (_c = obj === null || obj === void 0 ? void 0 : obj[af_core_1.CUSTOM_PROPS_KEY]) === null || _c === void 0 ? void 0 : _c[af_core_1.TRANSLATION_ID]) === null || _d === void 0 ? void 0 : _d[propName];
        if (value instanceof Array) {
            value = value.map((x, index) => {
                let tempId = `${identifier}${af_core_1.TRANSLATION_TOKEN}${index}`;
                let temp = formatMessage({ 'id': tempId });
                return temp === tempId ? x : temp;
            });
        }
        else {
            value = value ? formatMessage({ 'id': identifier }) : '';
            // if id is the value, fall back to the original value
            if (value === identifier) {
                value = (0, af_core_1.getOrElse)(obj, propName);
            }
        }
    }
    return value;
};
exports.translateMessage = translateMessage;
const useFormIntl = function () {
    let obj;
    try {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        obj = (0, react_intl_1.useIntl)();
    }
    catch (e) {
        console.warn('Use Intl Failed. Localization would not work');
        obj = {
            formatMessage: (a) => { return a; }
        };
    }
    return obj;
};
exports.useFormIntl = useFormIntl;
/**
 * Binds the component to the Form element whose state is being provided
 * @param formFieldState  The state of the Field received from Adaptive Form Component
 * @param propsMapper Mapping Field State to Props of the component
 * @param Component The component to render.
 * @param wrap
 */
const useRenderer = function (formFieldState, Component, propsMapper = (a) => a, wrap = false) {
    const [state, handlers] = (0, useRuleEngine_1.useRuleEngine)(formFieldState);
    const i18n = (0, exports.useFormIntl)();
    const [ref] = (0, useRuleEngine_1.useFocus)(formFieldState);
    const res = propsMapper(state, handlers, (0, exports.translateMessage)(state, i18n.formatMessage));
    return (wrap ? (react_1.default.createElement("div", { className: 'field' },
        react_1.default.createElement(Component, Object.assign({}, res, { ref: ref })))) : react_1.default.createElement(Component, Object.assign({}, res, { ref: ref })));
};
exports.useRenderer = useRenderer;

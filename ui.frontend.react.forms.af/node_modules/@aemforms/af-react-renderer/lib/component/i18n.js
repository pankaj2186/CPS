"use strict";
/*************************************************************************
* ADOBE CONFIDENTIAL
* ___________________
*
* Copyright 2022 Adobe
* All Rights Reserved.
*
* NOTICE: All information contained herein is, and remains
* the property of Adobe and its suppliers, if any. The intellectual
* and technical concepts contained herein are proprietary to Adobe
* and its suppliers and are protected by all applicable intellectual
* property laws, including trade secret and copyright laws.
* Dissemination of this information or reproduction of this material
* is strictly forbidden unless prior written permission is obtained
* from Adobe.

* Adobe permits you to use and modify this file solely in accordance with
* the terms of the Adobe license agreement accompanying it.
*************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTranslationMessages = void 0;
const af_core_1 = require("@aemforms/af-core");
const af_core_2 = require("@aemforms/af-core");
const getTranslationMessages = (input) => {
    return Object.keys(input).reduce((acc, curr) => {
        const objValue = input[curr];
        let ret = null;
        if (objValue && objValue instanceof Object) {
            ret = (0, exports.getTranslationMessages)(objValue);
        }
        else if (objValue && objValue instanceof Array) {
            ret = (0, exports.getTranslationMessages)(objValue[0]);
        }
        else {
            const f1 = input;
            if (af_core_2.CUSTOM_PROPS_KEY in f1 && typeof f1[af_core_2.CUSTOM_PROPS_KEY] === 'object' && af_core_2.TRANSLATION_ID in f1[af_core_2.CUSTOM_PROPS_KEY]) {
                let idObj = f1[af_core_2.CUSTOM_PROPS_KEY][af_core_2.TRANSLATION_ID];
                ret = af_core_1.translationProps.reduce((a, prop) => {
                    let localRet = {};
                    // only if value exists, add to translation object
                    if (f1[prop] && idObj[prop]) {
                        // in case of array, add each properties in the translation object
                        // for example, enumNames and enum
                        if (f1[prop] instanceof Array) {
                            f1[prop].forEach((item, index) => {
                                let key = `${idObj[prop]}${af_core_2.TRANSLATION_TOKEN}${index}`;
                                // @ts-ignore
                                localRet[key] = {
                                    'id': key,
                                    'defaultMessage': item
                                };
                            });
                        }
                        else {
                            let key = idObj[prop];
                            // @ts-ignore
                            localRet[key] = {
                                'id': key,
                                'defaultMessage': f1[prop]
                            };
                        }
                    }
                    return Object.assign(a, localRet);
                }, {});
            }
        }
        return Object.assign(acc, ret);
    }, {});
};
exports.getTranslationMessages = getTranslationMessages;

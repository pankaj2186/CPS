/*************************************************************************
* ADOBE CONFIDENTIAL
* ___________________
*
* Copyright 2022 Adobe
* All Rights Reserved.
*
* NOTICE: All information contained herein is, and remains
* the property of Adobe and its suppliers, if any. The intellectual
* and technical concepts contained herein are proprietary to Adobe
* and its suppliers and are protected by all applicable intellectual
* property laws, including trade secret and copyright laws.
* Dissemination of this information or reproduction of this material
* is strictly forbidden unless prior written permission is obtained
* from Adobe.

* Adobe permits you to use and modify this file solely in accordance with
* the terms of the Adobe license agreement accompanying it.
*************************************************************************/

import { getCurrency } from './currencies.js';

const NUMBER_REGEX =
    /(?:[#]+|[@]+(#+)?|[0]+|[,]|[.]|[-]|[+]|[%]|[¤]{1,4}(?:\/([a-zA-Z]{3}))?|[;]|[K]{1,2}|E{1,2}[+]?|'(?:[^']|'')*')|[^a-zA-Z']+/g;
const supportedUnits = ['acre', 'bit', 'byte', 'celsius', 'centimeter', 'day',
    'degree', 'fahrenheit', 'fluid-ounce', 'foot', 'gallon', 'gigabit',
    'gigabyte', 'gram', 'hectare', 'hour', 'inch', 'kilobit', 'kilobyte',
    'kilogram', 'kilometer', 'liter', 'megabit', 'megabyte', 'meter', 'mile',
    'mile-scandinavian', 'milliliter', 'millimeter', 'millisecond', 'minute', 'month',
    'ounce', 'percent', 'petabyte', 'pound', 'second', 'stone', 'terabit', 'terabyte', 'week', 'yard', 'year'].join('|');
const ShorthandStyles = [/^currency(?:\/([a-zA-Z]{3}))?$/, /^decimal$/, /^integer$/,  /^percent$/, new RegExp(`^unit\/(${supportedUnits})$`)];
function parseNumberSkeleton(skeleton, language) {
    const options = {};
    const order = [];
    let match, index;
    for (index = 0; index < ShorthandStyles.length && match == null; index++) {
        match = ShorthandStyles[index].exec(skeleton);
    }
    if (match) {
        switch(index) {
            case 1:
                options.style = 'currency';
                options.currencyDisplay = 'narrowSymbol';
                if (match[1]) {
                    options.currency = match[1];
                } else {
                    options.currency = getCurrency(language);
                }
                break;
            case 2:
                new Intl.NumberFormat(language, {}).resolvedOptions();
                options.minimumFractionDigits = options.minimumFractionDigits || 2;
                break;
            case 3:
                options.minimumFractionDigits = 0;
                options.maximumFractionDigits = 0;
                break;
            case 4:
                options.style = 'percent';
                options.maximumFractionDigits = 2;
                break;
            case 5:
                options.style = "unit";
                options.unitDisplay = "long";
                options.unit = match[1];
                break;
        }
        return {
            options,
            order
        }
    }
    options.useGrouping = false;
    options.minimumIntegerDigits = 1;
    options.maximumFractionDigits = 0;
    options.minimumFractionDigits = 0;
    skeleton.replace(NUMBER_REGEX, (match, maxSignificantDigits, currencySymbol, offset) => {
        const len = match.length;
        switch(match[0]) {
            case '#':
                order.push(['digit', len]);
                if (options?.decimal === true) {
                    options.maximumFractionDigits = options.minimumFractionDigits + len;
                }
                break;
            case '@':
                if (options?.minimumSignificantDigits) {
                    throw "@ symbol should occur together"
                }
                const hashes = maxSignificantDigits || "";
                order.push(['@', len - hashes.length]);
                options.minimumSignificantDigits = len - hashes.length;
                options.maximumSignificantDigits = len;
                order.push(['digit', hashes.length]);
                break;
            case ',':
                if (options?.decimal === true) {
                    throw "grouping character not supporting for fractions"
                }
                order.push(['group', 1]);
                options.useGrouping = 'auto';
                break;
            case '.':
                if (options?.decimal) {
                    console.error("only one decimal symbol is allowed");
                } else {
                    order.push(['decimal', 1]);
                    options.decimal = true;
                }
                break;
            case '0':
                order.push('0', len);
                if(options.minimumSignificantDigits || options.maximumSignificantDigits) {
                    throw "0 is not supported with @"
                }
                if (options?.decimal === true) {
                    options.minimumFractionDigits = len;
                    if (!options.maximumFractionDigits) {
                        options.maximumFractionDigits = len;
                    }
                } else {
                    options.minimumIntegerDigits = len;
                }
                break;
            case '-':
                if (offset !== 0) {
                    console.error("sign display is always in the beginning");
                }
                options.signDisplay = 'negative';
                order.push(['signDisplay', 1, '-']);
                break;
            case '+':
                if (offset !== 0 && order[order.length - 1][0] === 'E') {
                    console.error("sign display is always in the beginning");
                }
                if (offset === 0) {
                    options.signDisplay = 'always';
                }
                order.push(['signDisplay', 1, '+']);
                break;
            case '¤':
                if (offset !== 0 && offset !== skeleton.length - 1) {
                    console.error("currency display should be either in the beginning or at the end");
                } else {
                    options.style = 'currency';
                    options.currencyDisplay = ['symbol', 'code', 'name', 'narrowSymbol'][len - 1];
                    options.currency = currencySymbol || getCurrency(language);
                    order.push(['currency', len]);
                }
                break;
            case '%':
                if (offset !== 0 && offset !== skeleton.length - 1) {
                    console.error("percent display should be either in the beginning or at the end");
                } else {
                    order.push(['%', 1]);
                    options.style = 'percent';
                }
                break;
            case 'E':
                order.push(['E', len]);
                options.style = ['scientific','engineering'](len - 1);
                break;
            default:
                console.error("unknown chars" + match);
        }
    });
    return {
        options,
        order
    };
}

export { ShorthandStyles, parseNumberSkeleton };

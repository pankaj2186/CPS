/*************************************************************************
* ADOBE CONFIDENTIAL
* ___________________
*
* Copyright 2022 Adobe
* All Rights Reserved.
*
* NOTICE: All information contained herein is, and remains
* the property of Adobe and its suppliers, if any. The intellectual
* and technical concepts contained herein are proprietary to Adobe
* and its suppliers and are protected by all applicable intellectual
* property laws, including trade secret and copyright laws.
* Dissemination of this information or reproduction of this material
* is strictly forbidden unless prior written permission is obtained
* from Adobe.

* Adobe permits you to use and modify this file solely in accordance with
* the terms of the Adobe license agreement accompanying it.
*************************************************************************/

import { formatDate, parseDate } from './date/DateParser.js';
export { getSkeleton as parseDateSkeleton } from './date/SkeletonParser.js';
import { formatNumber, parseNumber } from './number/NumberParser.js';
import './number/SkeletonParser.js';
import './number/currencies.js';

const getCategory = function (skeleton) {
    const chkCategory = skeleton?.match(/^(?:(num|date)\|)?(.+)/);
    return [chkCategory?.[1], chkCategory?.[2]]
};
const format = function (value, locale, skeleton, timezone) {
    const [category, skelton] = getCategory(skeleton);
    switch (category) {
        case 'date':
            if (!(value instanceof Date)) {
                value = new Date(value);
            }
            return formatDate(value, locale, skelton, timezone)
        case 'num':
            return formatNumber(value, locale, skelton)
        default:
            throw `unable to deduce the format. The skeleton should be date|<format> for date formats and num|<format> for numbers`
    }
};
const parse = function (value, locale, skeleton, timezone) {
    const [category, skelton] = getCategory(skeleton);
    switch (category) {
        case 'date':
            return parseDate(value, locale, skelton, timezone)
        case 'number':
            return parseNumber(value, locale, skelton)
        default:
            throw `unable to deduce the format. The skeleton should be date|<format> for date formats and num|<format> for numbers`
    }
};

export { format, formatDate, formatNumber, parse, parseDate, parseNumber };

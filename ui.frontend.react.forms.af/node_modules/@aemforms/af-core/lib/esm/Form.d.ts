import Container from './Container.js';
import { Action, BaseModel, FieldModel, FieldsetModel, FormJson, FormModel, IFormFieldFactory } from './types/index.js';
import FormMetaData from './FormMetaData.js';
import EventQueue from './controller/EventQueue.js';
import { Logger, LogLevel } from './controller/Logger.js';
import RuleEngine from './rules/RuleEngine.js';
declare class Form extends Container<FormJson> implements FormModel {
    private _ruleEngine;
    private _eventQueue;
    private _fields;
    _ids: Generator<string, void, string>;
    private _invalidFields;
    private _logger;
    constructor(n: FormJson, fieldFactory: IFormFieldFactory, _ruleEngine: RuleEngine, _eventQueue?: EventQueue, logLevel?: LogLevel);
    get logger(): Logger;
    private dataRefRegex;
    get metaData(): FormMetaData;
    get action(): string | undefined;
    get lang(): string;
    importData(dataModel: any): void;
    exportData(): any;
    setFocus(field: BaseModel): void;
    getState(): {
        description?: string | undefined;
    } & import("./types/Json.js").RulesJson & {
        enumNames?: string[] | undefined;
        enum?: any[] | undefined;
    } & {
        accept?: string[] | undefined;
        enforceEnum?: boolean | undefined;
        exclusiveMinimum?: number | undefined;
        exclusiveMaximum?: number | undefined;
        format?: string | undefined;
        maxFileSize?: string | number | undefined;
        maxLength?: number | undefined;
        maximum?: number | undefined;
        maxItems?: number | undefined;
        minOccur?: number | undefined;
        maxOccur?: number | undefined;
        minLength?: number | undefined;
        minimum?: number | undefined;
        minItems?: number | undefined;
        pattern?: string | undefined;
        required?: boolean | undefined;
        step?: number | undefined;
        type?: string | undefined;
        validationExpression?: string | undefined;
        uniqueItems?: boolean | undefined;
    } & {
        dataRef?: string | null | undefined;
        ':type'?: string | undefined;
        label?: import("./types/Json.js").Label | undefined;
        enabled?: boolean | undefined;
        visible?: boolean | undefined;
        name?: string | undefined;
        constraintMessages?: import("./types/Json.js").ConstraintsMessages | undefined;
        fieldType?: string | undefined;
        errorMessage?: string | undefined;
        properties?: {
            [key: string]: any;
        } | undefined;
        repeatable?: boolean | undefined;
        screenReaderText?: string | undefined;
        tooltip?: string | undefined;
        altText?: string | undefined;
        viewType?: string | undefined;
    } & {
        items: (import("./types/Json.js").FieldJson | import("./types/Json.js").ContainerJson)[];
        initialItems?: number | undefined;
        activeChild?: string | undefined;
    } & {
        metadata?: import("./types/Json.js").MetaDataJson | undefined;
        data?: any;
        title?: string | undefined;
        action?: string | undefined;
        adaptiveForm?: string | undefined;
        lang?: string | undefined;
    } & {
        items: any[];
        properties: {
            [key: string]: any;
        };
        index: number;
        parent: undefined;
        qualifiedName: any;
        events: {};
        rules: {};
        repeatable: boolean | undefined;
        ':type': string;
        id: string;
    };
    get type(): string;
    isTransparent(): boolean;
    get form(): FormModel;
    get ruleEngine(): RuleEngine;
    getUniqueId(): string;
    fieldAdded(field: FieldModel | FieldsetModel): void;
    visit(callBack: (field: FieldModel | FieldsetModel) => void): void;
    traverseChild(container: Container<any>, callBack: (field: FieldModel | FieldsetModel) => void): void;
    validate(): import("./types/Model.js").ValidationError[];
    isValid(): boolean;
    dispatch(action: Action): void;
    submit(action: Action, context: any): void;
    reset(): void;
    getElement(id: string): FieldModel | FieldsetModel | this;
    get qualifiedName(): string;
    getEventQueue(): EventQueue;
    get name(): string;
    get value(): null;
    get id(): string;
    get title(): string;
}
export default Form;

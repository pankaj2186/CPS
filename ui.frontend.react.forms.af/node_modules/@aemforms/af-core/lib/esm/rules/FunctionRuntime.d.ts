type HTTP_VERB = 'GET' | 'POST';
export declare const request: (context: any, uri: string, httpVerb: HTTP_VERB, payload: any, success: string, error: string, headers: any) => Promise<void>;
export declare const submit: (context: any, success: string, error: string, submitAs?: 'application/json' | 'multipart/form-data', input_data?: any) => Promise<void>;
export type CustomFunction = Function;
export type FunctionDefinition = {
    _func: CustomFunction;
    _signature: Array<any>;
};
declare class FunctionRuntimeImpl {
    private customFunctions;
    registerFunctions(functions: {
        [key: string]: FunctionDefinition | CustomFunction;
    }): void;
    unregisterFunctions(...names: string[]): void;
    getFunctions(): {
        validate: {
            _func: (args: Array<unknown>, data: unknown, interpreter: any) => any;
            _signature: never[];
        };
        setFocus: {
            _func: (args: Array<unknown>, data: unknown, interpreter: any) => void;
            _signature: never[];
        };
        getData: {
            _func: (args: unknown, data: unknown, interpreter: any) => any;
            _signature: never[];
        };
        exportData: {
            _func: (args: unknown, data: unknown, interpreter: any) => any;
            _signature: never[];
        };
        importData: {
            _func: (args: Array<unknown>, data: unknown, interpreter: any) => {};
            _signature: never[];
        };
        submitForm: {
            _func: (args: Array<unknown>, data: unknown, interpreter: any) => {};
            _signature: never[];
        };
        request: {
            _func: (args: Array<unknown>, data: unknown, interpreter: any) => {};
            _signature: never[];
        };
        dispatchEvent: {
            _func: (args: Array<unknown>, data: unknown, interpreter: any) => {};
            _signature: never[];
        };
    };
}
export declare const FunctionRuntime: FunctionRuntimeImpl;
export {};

import { Action, BaseModel, ContainerJson, ContainerModel, FieldModel, FieldsetModel, FormModel, IFormFieldFactory, RulesJson } from './types/index.js';
import Scriptable from './Scriptable.js';
import DataGroup from './data/DataGroup.js';
declare abstract class Container<T extends ContainerJson & RulesJson> extends Scriptable<T> implements ContainerModel {
    protected _children: Array<FieldModel | FieldsetModel>;
    protected _childrenReference: any;
    private _itemTemplate;
    private fieldFactory;
    constructor(json: T, _options: {
        form: FormModel;
        parent: ContainerModel;
        fieldFactory: IFormFieldFactory;
    });
    ruleNodeReference(): any;
    get items(): (FieldModel | FieldsetModel)[];
    get maxItems(): number;
    set maxItems(m: number);
    get minItems(): number;
    hasDynamicItems(): boolean;
    get isContainer(): boolean;
    private _activeChild;
    private isSiteContainer;
    private isAFormField;
    private getItemsState;
    getState(isRepeatableChild?: boolean): T & {
        items: any[];
        properties: {
            [key: string]: any;
        };
        index: number;
        parent: undefined;
        qualifiedName: any;
        events: {};
        rules: {};
        repeatable: boolean | undefined;
        ':type': string;
        id: string;
    };
    private _createChild;
    private walkSiteContainerItems;
    private _addChildToRuleNode;
    private _addChild;
    indexOf(f: FieldModel | FieldsetModel): number;
    defaultDataModel(name: string): DataGroup | undefined;
    _initialize(): void;
    private _initializeSiteContainer;
    addItem(action: Action): void;
    removeItem(action: Action): void;
    queueEvent(action: Action): void;
    reset(): void;
    validate(): import("./types/Model.js").ValidationError[];
    dispatch(action: Action): void;
    importData(contextualDataModel: DataGroup): void;
    syncDataAndFormModel(contextualDataModel?: DataGroup): void;
    get activeChild(): BaseModel | null;
    set activeChild(c: BaseModel | null);
}
export default Container;

import { Action, BaseJson, FieldModel, FieldsetModel, FormModel, ValidationError } from '../types/index.js';
declare class ActionImpl implements Action {
    private _metadata?;
    protected _type: string;
    private _payload?;
    private _target;
    constructor(payload: any, type: string, _metadata?: any);
    get type(): string;
    get payload(): any;
    get metadata(): any;
    get target(): FormModel | FieldModel | FieldsetModel;
    get isCustomEvent(): boolean;
    protected payloadToJson(): any;
    toJson(): {
        payload: any;
        type: string;
        isCustomEvent: boolean;
    };
    toString(): string;
}
export type ChangePayload = {
    changes: Array<{
        propertyName: string;
        prevValue?: any;
        currentValue: any;
    }>;
};
export declare class Change extends ActionImpl {
    constructor(payload: ChangePayload, dispatch?: boolean);
    withAdditionalChange(change: Change): Change;
}
export declare class Invalid extends ActionImpl {
    constructor(payload?: any);
}
export declare class Valid extends ActionImpl {
    constructor(payload?: any);
}
export declare class ExecuteRule extends ActionImpl {
    constructor(payload?: any, dispatch?: boolean);
}
export declare const propertyChange: (propertyName: string, currentValue: any, prevValue?: any) => Change;
export declare class Initialize extends ActionImpl {
    constructor(payload?: any, dispatch?: boolean);
}
export declare class FormLoad extends ActionImpl {
    constructor();
}
export declare class Click extends ActionImpl {
    constructor(payload?: any, dispatch?: boolean);
}
export declare class Blur extends ActionImpl {
    constructor(payload?: any, dispatch?: boolean);
}
export declare class ValidationComplete extends ActionImpl {
    constructor(payload?: Array<ValidationError>, dispatch?: boolean);
}
export declare class Focus extends ActionImpl {
    constructor();
}
export declare class Submit extends ActionImpl {
    constructor(payload?: any, dispatch?: boolean);
}
export declare class Reset extends ActionImpl {
    constructor(payload?: any, dispatch?: boolean);
}
export declare class FieldChanged extends ActionImpl {
    constructor(changes: ChangePayload, field: BaseJson);
}
export declare class CustomEvent extends ActionImpl {
    constructor(eventName: string, payload?: any, dispatch?: boolean);
    get isCustomEvent(): boolean;
}
export declare class AddItem extends ActionImpl {
    constructor(payload?: number);
}
export declare class RemoveItem extends ActionImpl {
    constructor(payload?: number);
}
export declare class AddInstance extends ActionImpl {
    constructor(payload?: number);
}
export declare class RemoveInstance extends ActionImpl {
    constructor(payload?: number);
}
export {};

import { ConstraintsMessages, ContainerModel, FieldJson, FieldModel, FormModel, ValidationError } from './types/index.js';
import Scriptable from './Scriptable.js';
import DataValue from './data/DataValue.js';
import DataGroup from './data/DataGroup.js';
declare class Field extends Scriptable<FieldJson> implements FieldModel {
    constructor(params: FieldJson, _options: {
        form: FormModel;
        parent: ContainerModel;
    });
    private _ruleNodeReference;
    _initialize(): any;
    ruleNodeReference(): any;
    protected _getDefaults(): {
        readOnly: boolean;
        enabled: boolean;
        visible: boolean;
        type: string | undefined;
    };
    protected _getFallbackType(): string | undefined;
    protected _applyDefaults(): void;
    private unset;
    private coerceParam;
    get editFormat(): string | undefined;
    get displayFormat(): string | undefined;
    get placeholder(): string | undefined;
    get readOnly(): boolean | undefined;
    set readOnly(e: boolean | undefined);
    get enabled(): boolean | undefined;
    set enabled(e: boolean | undefined);
    get valid(): boolean | undefined;
    get emptyValue(): "" | null | undefined;
    get enum(): any[] | undefined;
    set enum(e: any[] | undefined);
    get enumNames(): string[] | undefined;
    set enumNames(e: string[] | undefined);
    get required(): boolean;
    set required(r: boolean);
    get maximum(): number | undefined;
    set maximum(m: number | undefined);
    get minimum(): number | undefined;
    set minimum(m: number | undefined);
    private isEmpty;
    private withCategory;
    get editValue(): any;
    get displayValue(): any;
    protected getDataNodeValue(typedValue: any): any;
    private updateDataNodeAndTypedValue;
    get value(): any;
    set value(v: any);
    reset(): void;
    protected _updateRuleNodeReference(value: any): void;
    protected getInternalType(): string | undefined;
    valueOf(): any;
    toString(): any;
    getErrorMessage(constraint: keyof (ConstraintsMessages)): string;
    get errorMessage(): string | undefined;
    get screenReaderText(): string | undefined;
    _getConstraintObject(): {
        enum: (constraint: any, inputVal: any) => {
            valid: boolean;
            value: any;
        };
        accept: (constraint: any, inputVal: any) => {
            valid: boolean;
            value: any;
        };
        exclusiveMinimum: (constraint: any, inputVal: any) => {
            valid: boolean;
            value: any;
        };
        exclusiveMaximum: (constraint: any, inputVal: any) => {
            valid: boolean;
            value: any;
        };
        format: (constraint: any, inputVal: any) => {
            valid: boolean;
            value: any;
        };
        maxFileSize: (constraint: any, inputVal: any) => {
            valid: boolean;
            value: any;
        };
        maxLength: (constraint: any, inputVal: any) => {
            valid: boolean;
            value: any;
        };
        maximum: (constraint: any, inputVal: any) => {
            valid: boolean;
            value: any;
        };
        maxItems: (constraint: any, inputVal: any) => {
            valid: boolean;
            value: any;
        };
        minLength: (constraint: any, inputVal: any) => {
            valid: boolean;
            value: any;
        };
        minimum: (constraint: any, inputVal: any) => {
            valid: boolean;
            value: any;
        };
        minItems: (constraint: any, inputVal: any) => {
            valid: boolean;
            value: any;
        };
        pattern: (constraint: any, inputVal: any) => {
            valid: boolean;
            value: any;
        };
        required: (constraint: any, inputVal: any) => {
            valid: boolean;
            value: any;
        };
        type: (constraint: any, inputVal: any) => {
            valid: boolean;
            value: any;
        };
        uniqueItems: (constraint: any, inputVal: any) => {
            valid: boolean;
            value: any;
        };
    };
    private isArrayType;
    private checkEnum;
    private checkStep;
    private checkValidationExpression;
    private getConstraints;
    get format(): string | undefined;
    get enforceEnum(): boolean | undefined;
    get tooltip(): string | undefined;
    get maxLength(): number | undefined;
    get minLength(): number | undefined;
    get pattern(): string | undefined;
    get step(): number | undefined;
    get exclusiveMinimum(): number | undefined;
    set exclusiveMinimum(eM: number | undefined);
    get exclusiveMaximum(): number | undefined;
    set exclusiveMaximum(eM: number | undefined);
    get default(): any;
    private isNotEmpty;
    protected evaluateConstraints(): any;
    triggerValidationEvent(changes: any): void;
    validate(): ValidationError[];
    importData(contextualDataModel: DataGroup): void;
    defaultDataModel(name: string | number): DataValue;
    getState(): {
        editFormat: string | undefined;
        displayFormat: string | undefined;
        editValue: any;
        displayValue: any;
        description?: string | undefined;
        rules: import("./types/Json.js").Items<string> & {};
        events: import("./types/Json.js").Items<string | string[] | undefined> & {};
        enumNames?: string[] | undefined;
        enum?: any[] | undefined;
        accept?: string[] | undefined;
        enforceEnum?: boolean | undefined;
        exclusiveMinimum?: number | undefined;
        exclusiveMaximum?: number | undefined;
        format?: string | undefined;
        maxFileSize?: string | number | undefined;
        maxLength?: number | undefined;
        maximum?: number | undefined;
        maxItems?: number | undefined;
        minOccur?: number | undefined;
        maxOccur?: number | undefined;
        minLength?: number | undefined;
        minimum?: number | undefined;
        minItems?: number | undefined;
        pattern?: string | undefined;
        required?: boolean | undefined;
        step?: number | undefined;
        type?: string | undefined;
        validationExpression?: string | undefined;
        uniqueItems?: boolean | undefined;
        dataRef?: string | null | undefined;
        ':type': string;
        label?: import("./types/Json.js").Label | undefined;
        enabled?: boolean | undefined;
        visible?: boolean | undefined;
        name?: string | undefined;
        constraintMessages?: ConstraintsMessages | undefined;
        fieldType?: string | undefined;
        errorMessage?: string | undefined;
        properties: {
            [key: string]: any;
        };
        repeatable: boolean | undefined;
        screenReaderText?: string | undefined;
        tooltip?: string | undefined;
        altText?: string | undefined;
        viewType?: string | undefined;
        placeholder?: string | undefined;
        readOnly?: boolean | undefined;
        valid?: boolean | undefined;
        default?: any;
        value?: any;
        emptyValue?: "" | "undefined" | "null" | undefined;
        index: number;
        parent: undefined;
        qualifiedName: any;
        id: string;
    };
}
export default Field;

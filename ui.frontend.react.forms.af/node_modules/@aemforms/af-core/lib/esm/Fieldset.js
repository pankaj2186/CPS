/*************************************************************************
* ADOBE CONFIDENTIAL
* ___________________
*
* Copyright 2022 Adobe
* All Rights Reserved.
*
* NOTICE: All information contained herein is, and remains
* the property of Adobe and its suppliers, if any. The intellectual
* and technical concepts contained herein are proprietary to Adobe
* and its suppliers and are protected by all applicable intellectual
* property laws, including trade secret and copyright laws.
* Dissemination of this information or reproduction of this material
* is strictly forbidden unless prior written permission is obtained
* from Adobe.

* Adobe permits you to use and modify this file solely in accordance with
* the terms of the Adobe license agreement accompanying it.
*************************************************************************/

import Container from './Container.js';
import { Initialize, ExecuteRule } from './controller/Events.js';
import './BaseNode-d78cc1b0.js';
import './utils/DataRefParser.js';
import './data/DataGroup.js';
import './data/DataValue.js';
import './data/EmptyDataValue.js';
import './utils/JsonUtils.js';
import './types/Json.js';
import './utils/SchemaUtils.js';
import './Scriptable.js';

const defaults = {
    visible: true,
    enabled: true
};
class Fieldset extends Container {
    constructor(params, _options) {
        super(params, _options);
        this._applyDefaults();
        this.queueEvent(new Initialize());
        this.queueEvent(new ExecuteRule());
    }
    _applyDefaults() {
        Object.entries(defaults).map(([key, value]) => {
            if (this._jsonModel[key] === undefined) {
                this._jsonModel[key] = value;
            }
        });
        if (this._jsonModel.dataRef && this._jsonModel.type === undefined) {
            this._jsonModel.type = 'object';
        }
    }
    get type() {
        const ret = super.type;
        if (ret === 'array' || ret === 'object') {
            return ret;
        }
        return undefined;
    }
    get items() {
        return super.items;
    }
    get value() {
        return null;
    }
    get fieldType() {
        return 'panel';
    }
    get enabled() {
        return this._jsonModel.enabled;
    }
    set enabled(e) {
        this._setProperty('enabled', e);
    }
}

export { Fieldset };

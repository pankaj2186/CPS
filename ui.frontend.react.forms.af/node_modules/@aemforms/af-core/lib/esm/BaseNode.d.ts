import { Action, BaseJson, BaseModel, callbackFn, ContainerModel, FormModel, Primitives, ValidationError } from './types/index.js';
import DataGroup from './data/DataGroup.js';
import DataValue from './data/DataValue.js';
export declare const editableProperties: string[];
export declare const dynamicProps: string[];
export declare const staticFields: string[];
export declare const target: unique symbol;
export declare const qualifiedName: unique symbol;
export declare function dependencyTracked(): (target: BaseNode<any>, propertyKey: string, descriptor: PropertyDescriptor) => void;
export declare const include: (...fieldTypes: string[]) => (target: BaseNode<any>, propertyKey: string, descriptor: PropertyDescriptor) => void;
export declare const exclude: (...fieldTypes: string[]) => (target: BaseNode<any>, propertyKey: string, descriptor: PropertyDescriptor) => void;
export declare abstract class BaseNode<T extends BaseJson> implements BaseModel {
    private _options;
    private _ruleNode;
    private _lang?;
    private _callbacks;
    private _dependents;
    protected _jsonModel: T & {
        id: string;
    };
    private _tokens;
    get isContainer(): boolean;
    constructor(params: T, _options: {
        form: FormModel;
        parent: ContainerModel;
    });
    abstract value: Primitives;
    abstract reset(): any;
    protected setupRuleNode(): void;
    ruleNodeReference(): this;
    getRuleNode(): any;
    private getFromRule;
    get id(): string;
    get index(): number;
    get parent(): ContainerModel;
    get type(): string | undefined;
    get repeatable(): any;
    get fieldType(): string;
    get ':type'(): string;
    get name(): string | undefined;
    get description(): string | undefined;
    set description(d: string | undefined);
    get dataRef(): string | null | undefined;
    get visible(): boolean | undefined;
    set visible(v: boolean | undefined);
    get form(): FormModel;
    get ruleEngine(): import("./rules/RuleEngine.js").default;
    get label(): import("./types/Json.js").Label | undefined;
    set label(l: import("./types/Json.js").Label | undefined);
    get uniqueItems(): boolean | undefined;
    isTransparent(): boolean;
    getState(isRepeatableChild?: boolean): T & {
        properties: {
            [key: string]: any;
        };
        index: number;
        parent: undefined;
        qualifiedName: any;
        events: {};
        rules: {};
        repeatable: boolean | undefined;
        ':type': string;
        id: string;
    };
    subscribe(callback: callbackFn, eventName?: string): {
        unsubscribe: () => void;
    };
    _addDependent(dependent: BaseModel): void;
    removeDependent(dependent: BaseModel): void;
    abstract validate(): Array<ValidationError>;
    abstract executeAction(action: Action): any;
    queueEvent(action: Action): void;
    dispatch(action: Action): void;
    notifyDependents(action: Action): void;
    _setProperty<T>(prop: string, newValue: T, notify?: boolean): any;
    _bindToDataModel(contextualDataModel: DataGroup): void;
    private _data?;
    getDataNode(): DataValue | undefined;
    get language(): string | undefined;
    get properties(): {
        [key: string]: any;
    };
    set properties(p: {
        [key: string]: any;
    });
    abstract defaultDataModel(name: string | number): DataValue | undefined;
    abstract importData(a: DataGroup): any;
    getNonTransparentParent(): ContainerModel;
    _initialize(): void;
    protected _applyUpdates(propNames: string[], updates: any): any;
    get qualifiedName(): any;
    focus(): void;
}
